{"version":3,"sources":["components/Button.tsx","assets/audio/timer.mp3","components/Timer.tsx","App.tsx","index.tsx"],"names":["Button","props","className","Timer","useState","quantity","setQuantity","value","setValue","isActive","setIsActive","stateButton","setStateButton","hasClicked","setHasClicked","time","setTime","minutes","Math","floor","seconds","String","padStart","split","minutesLeft","minutesRight","secondsLeft","secondsRight","toggleEnableButton","handleClick","useEffect","Notification","requestPermission","setTimeout","document","getElementById","play","toString","activate","onClick","clicked","controls","id","src","timer","type","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b1fa576e.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes }  from 'react';\r\nimport '../styles/Button.scss';\r\n\r\ninterface ButtonInterface extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    activate?: string | undefined;\r\n    clicked?: string | undefined;\r\n}\r\n\r\nexport function Button(props: ButtonInterface) {\r\n    return (\r\n        <button className=\"button\" { ...props } />\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/timer.dbb3e4ba.mp3\";","import { Button } from './Button';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport '../styles/Timer.scss';\r\nimport { setTimeout } from 'timers';\r\n\r\nimport timer from '../assets/audio/timer.mp3';\r\n\r\nexport function Timer() {\r\n    const [quantity, setQuantity] = useState(0)\r\n    const [value, setValue] = useState([true, false, false])\r\n    const [isActive, setIsActive] = useState(false)\r\n    const [stateButton, setStateButton] = useState('Iniciar')\r\n    const [hasClicked, setHasClicked] = useState(false)\r\n\r\n    const [time, setTime] = useState(25 * 60)\r\n    const minutes = Math.floor(time / 60)\r\n    const seconds = time % 60\r\n    const [minutesLeft, minutesRight] = String(minutes).padStart(2, '0').split('')\r\n    const [secondsLeft, secondsRight] = String(seconds).padStart(2, '0').split('')\r\n\r\n\r\n    function toggleEnableButton( value: number ) {\r\n        //seleciona qual botão de menu está ativado e adiciona os timers de cada um.\r\n        switch (value) {\r\n            case 0:\r\n                setValue([true, false, false])\r\n\r\n                setTime(25 * 60)\r\n                break\r\n\r\n            case 1: \r\n                setValue([false, true, false])\r\n\r\n                setTime(5 * 60)\r\n                break\r\n\r\n            case 2: \r\n                setValue([false, false, true])\r\n\r\n                setTime(15 * 60)\r\n                break\r\n        }\r\n    }\r\n\r\n    function handleClick() {\r\n        //qunado o clique do botão está ativado.\r\n        if (hasClicked === false) {\r\n            setIsActive(true)\r\n\r\n            setHasClicked(!hasClicked)\r\n            setStateButton('Pausar')\r\n        }\r\n\r\n        //quando o clique do botão está desativado.\r\n        else { \r\n            setIsActive(false)\r\n\r\n            setHasClicked(!hasClicked)\r\n            setStateButton('Iniciar')\r\n        }\r\n    }\r\n\r\n    useEffect( () => { \r\n        Notification.requestPermission()\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        if (isActive && time > 0) {\r\n            setTimeout( () => {\r\n                setTime(time - 1)\r\n            }, 1000)       \r\n        }\r\n\r\n        else if (isActive && time === 0) {     \r\n            //dispara um áudio e notificação quando o tempo chega à zero.\r\n            const audio: any = document.getElementById('audio')\r\n            audio.play()\r\n            new Notification(\"Vamos lá!\")\r\n\r\n            if (quantity < 4) {\r\n                //verifica se o programa já está no componente Button-Pequena pausa- ou no Button-Longa pausa-.\r\n                if ( value.toString() === [false, true, false].toString() || value.toString() === [false, false, true].toString() ) {\r\n                    toggleEnableButton(0)\r\n                }\r\n\r\n                else if (quantity === 3) {\r\n                    setQuantity(0)\r\n\r\n                    toggleEnableButton(2)\r\n                }\r\n\r\n                else { \r\n                    setQuantity(quantity + 1)\r\n\r\n                    toggleEnableButton(1)\r\n                }\r\n            }\r\n\r\n            //sempre no fim de cada execução, verifica se o timer continua ativo e os estados do botão.\r\n            handleClick()\r\n        }\r\n    }, [isActive, time])\r\n\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"button-group\">\r\n                <Button activate={ value[0].toString() } onClick={ () => toggleEnableButton(0) }>Pomodoro</Button>\r\n                <Button activate={ value[1].toString() } onClick={ () => toggleEnableButton(1) }>Pequena pausa</Button>\r\n                <Button activate={ value[2].toString() } onClick={ () => toggleEnableButton(2) }>Longa pausa</Button>\r\n            </div>\r\n            \r\n            <div className=\"timer\">\r\n                <div className=\"content\">\r\n                    <div className=\"numbers\">\r\n                        <div className=\"square\">{ minutesLeft }</div>\r\n                        <div className=\"square\">{ minutesRight }</div>\r\n\r\n                        <div className=\"separator\">\r\n                            <div className=\"circle\"></div>\r\n                            <div className=\"circle\"></div>\r\n                        </div> \r\n                    </div>\r\n\r\n                    <p>Minutos</p>\r\n                </div>\r\n\r\n                <div className=\"content\">\r\n                    <div className=\"numbers\">\r\n                        <div className=\"square\">{ secondsLeft }</div>\r\n                        <div className=\"square\">{ secondsRight }</div>\r\n                    </div>\r\n\r\n                    <p>Segundos</p>\r\n                </div>\r\n                \r\n            </div>\r\n            <Button className=\"start-button\" onClick={ () => { handleClick() } } clicked={ hasClicked.toString() }>{ stateButton }</Button>\r\n\r\n            <audio controls id=\"audio\">\r\n                <source src={ timer } type=\"audio/mp3\"/>\r\n            </audio>\r\n        </main>\r\n    )\r\n}","import { Timer } from './components/Timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}