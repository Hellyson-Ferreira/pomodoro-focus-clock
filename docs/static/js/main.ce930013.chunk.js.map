{"version":3,"sources":["components/Button.tsx","components/Timer.tsx","App.tsx","index.tsx"],"names":["Button","props","className","Timer","useState","quantity","setQuantity","time","setTime","value","setValue","toggleEnableButton","isActive","setIsActive","minutes","Math","floor","seconds","String","padStart","split","minutesLeft","minutesRight","secondsLeft","secondsRight","stateButton","setStateButton","hasClicked","setHasClicked","handleClick","useEffect","Notification","requestPermission","setTimeout","toString","activate","onClick","clicked","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAQO,SAASA,EAAOC,GACnB,OACI,oCAAQC,UAAU,UAAcD,I,iBCJjC,SAASE,IACZ,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAS,KAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEA,EAA0BJ,mBAAS,EAAC,GAAM,GAAO,IAAjD,mBAAOK,EAAP,KAAcC,EAAd,KACA,SAASC,EAAoBF,GAEzB,OAAQA,GACJ,KAAK,EACDC,EAAS,EAAC,GAAM,GAAO,IAEvBF,EAAQ,KACR,MAEJ,KAAK,EACDE,EAAS,EAAC,GAAO,GAAM,IAEvBF,EAAQ,KACR,MAEJ,KAAK,EACDE,EAAS,EAAC,GAAO,GAAO,IAExBF,EAAQ,MAKpB,MAAgCJ,oBAAS,GAAzC,mBAAOQ,EAAP,KAAiBC,EAAjB,KAEMC,EAAUC,KAAKC,MAAMT,EAAO,IAC5BU,EAAUV,EAAO,GAEvB,EAAoCW,OAAOJ,GAASK,SAAS,EAAG,KAAKC,MAAM,IAA3E,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCJ,OAAOD,GAASE,SAAS,EAAG,KAAKC,MAAM,IAA3E,mBAAOG,EAAP,KAAoBC,EAApB,KAEA,EAAsCpB,mBAAS,WAA/C,mBAAOqB,EAAP,KAAoBC,EAApB,KACA,EAAoCtB,oBAAS,GAA7C,mBAAOuB,EAAP,KAAmBC,EAAnB,KACA,SAASC,KAEc,IAAfF,GACAd,GAAY,GAEZe,GAAeD,GACfD,EAAe,YAKfb,GAAY,GAEZe,GAAeD,GACfD,EAAe,YA2CvB,OAvCAI,qBAAW,WACPC,aAAaC,uBAGjBF,qBAAW,WACHlB,GAAYL,EAAO,EACnB0B,sBAAY,WACRzB,EAAQD,EAAO,KAChB,IAGEK,GAAqB,IAATL,IACjB,IAAIwB,aAAa,gBAEb1B,EAAW,IAENI,EAAMyB,aAAe,EAAC,GAAO,GAAM,GAAOA,YAAczB,EAAMyB,aAAe,EAAC,GAAO,GAAO,GAAMA,WACnGvB,EAAmB,GAGD,IAAbN,GACLC,EAAY,GAEZK,EAAmB,KAInBL,EAAYD,EAAW,GAEvBM,EAAmB,KAK3BkB,OAEL,CAACjB,EAAUL,IAIV,iCACI,sBAAKL,UAAU,eAAf,UACI,cAAC,EAAD,CAAQiC,SAAW1B,EAAM,GAAGyB,WAAaE,QAAU,kBAAMzB,EAAmB,IAA5E,sBACA,cAAC,EAAD,CAAQwB,SAAW1B,EAAM,GAAGyB,WAAaE,QAAU,kBAAMzB,EAAmB,IAA5E,2BACA,cAAC,EAAD,CAAQwB,SAAW1B,EAAM,GAAGyB,WAAaE,QAAU,kBAAMzB,EAAmB,IAA5E,4BAGJ,sBAAKT,UAAU,QAAf,UACI,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,SAAf,SAA0BmB,IAC1B,qBAAKnB,UAAU,SAAf,SAA0BoB,IAE1B,sBAAKpB,UAAU,YAAf,UACI,qBAAKA,UAAU,WACf,qBAAKA,UAAU,iBAIvB,2CAGJ,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,SAAf,SAA0BqB,IAC1B,qBAAKrB,UAAU,SAAf,SAA0BsB,OAG9B,+CAIR,cAAC,EAAD,CAAQtB,UAAU,eAAekC,QAAU,WAAQP,KAAkBQ,QAAUV,EAAWO,WAA1F,SAAyGT,OC5HtGa,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,O,MCCNqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ce930013.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes }  from 'react';\r\nimport '../styles/Button.scss';\r\n\r\ninterface ButtonInterface extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    activate?: string | undefined;\r\n    clicked?: string | undefined;\r\n}\r\n\r\nexport function Button(props: ButtonInterface) {\r\n    return (\r\n        <button className=\"button\" { ...props } />\r\n    )\r\n}","import { Button } from './Button';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport '../styles/Timer.scss';\r\nimport { setTimeout } from 'timers';\r\n\r\nexport function Timer() {\r\n    const [quantity, setQuantity] = useState(0)\r\n    const [time, setTime] = useState(3 * 60)\r\n\r\n    const [value, setValue] = useState([true, false, false])\r\n    function toggleEnableButton( value: number ) {\r\n        //seleciona qual botão de menu está ativado e adiciona os timers de cada um.\r\n        switch (value) {\r\n            case 0:\r\n                setValue([true, false, false])\r\n\r\n                setTime(3 * 60)\r\n                break\r\n\r\n            case 1: \r\n                setValue([false, true, false])\r\n\r\n                setTime(5 * 60)\r\n                break\r\n\r\n            case 2: \r\n                setValue([false, false, true])\r\n\r\n                setTime(15 * 60)\r\n                break\r\n        }\r\n    }\r\n\r\n    const [isActive, setIsActive] = useState(false)\r\n\r\n    const minutes = Math.floor(time / 60)\r\n    const seconds = time % 60\r\n\r\n    const [minutesLeft, minutesRight] = String(minutes).padStart(2, '0').split('')\r\n    const [secondsLeft, secondsRight] = String(seconds).padStart(2, '0').split('')\r\n\r\n    const [stateButton, setStateButton] = useState('Iniciar')\r\n    const [hasClicked, setHasClicked] = useState(false)\r\n    function handleClick() {\r\n        //qunado o clique do botão está ativado.\r\n        if (hasClicked === false) {\r\n            setIsActive(true)\r\n\r\n            setHasClicked(!hasClicked)\r\n            setStateButton('Pausar')\r\n        }\r\n\r\n        //quando o clique do botão está desativado.\r\n        else { \r\n            setIsActive(false)\r\n\r\n            setHasClicked(!hasClicked)\r\n            setStateButton('Iniciar')\r\n        }\r\n    }\r\n\r\n    useEffect( () => { \r\n        Notification.requestPermission()\r\n    })\r\n\r\n    useEffect( () => {\r\n        if (isActive && time > 0) {\r\n            setTimeout( () => {\r\n                setTime(time - 1)\r\n            }, 10)       \r\n        }\r\n\r\n        else if (isActive && time === 0) {\r\n            new Notification(\"Vamos lá!\")\r\n\r\n            if (quantity < 4) {\r\n                //verifica se o programa já está no componente Button-Pequena pausa- ou no Button-Longa pausa-.\r\n                if ( value.toString() === [false, true, false].toString() || value.toString() === [false, false, true].toString() ) {\r\n                    toggleEnableButton(0)\r\n                }\r\n\r\n                else if (quantity === 3) {\r\n                    setQuantity(0)\r\n\r\n                    toggleEnableButton(2)\r\n                }\r\n\r\n                else { \r\n                    setQuantity(quantity + 1)\r\n\r\n                    toggleEnableButton(1)\r\n                }\r\n            }\r\n\r\n            //sempre no fim de cada execução, verifica se o timer continua ativo e os estados do botão.\r\n            handleClick()\r\n        }\r\n    }, [isActive, time])\r\n\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"button-group\">\r\n                <Button activate={ value[0].toString() } onClick={ () => toggleEnableButton(0) }>Pomodoro</Button>\r\n                <Button activate={ value[1].toString() } onClick={ () => toggleEnableButton(1) }>Pequena pausa</Button>\r\n                <Button activate={ value[2].toString() } onClick={ () => toggleEnableButton(2) }>Longa pausa</Button>\r\n            </div>\r\n            \r\n            <div className=\"timer\">\r\n                <div className=\"content\">\r\n                    <div className=\"numbers\">\r\n                        <div className=\"square\">{ minutesLeft }</div>\r\n                        <div className=\"square\">{ minutesRight }</div>\r\n\r\n                        <div className=\"separator\">\r\n                            <div className=\"circle\"></div>\r\n                            <div className=\"circle\"></div>\r\n                        </div> \r\n                    </div>\r\n\r\n                    <p>Minutos</p>\r\n                </div>\r\n\r\n                <div className=\"content\">\r\n                    <div className=\"numbers\">\r\n                        <div className=\"square\">{ secondsLeft }</div>\r\n                        <div className=\"square\">{ secondsRight }</div>\r\n                    </div>\r\n\r\n                    <p>Segundos</p>\r\n                </div>\r\n                \r\n            </div>\r\n            <Button className=\"start-button\" onClick={ () => { handleClick() } } clicked={ hasClicked.toString() }>{ stateButton }</Button>\r\n        </main>\r\n    )\r\n}","import { Timer } from './components/Timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}